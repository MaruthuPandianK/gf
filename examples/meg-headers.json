{
  "name": "sensitive-header-leak",
  "flags": "-Hni",
  "pattern": "(?i)^(?:(<[a-z0-9_-]+:|[A-Za-z0-9_-]+:)|(?:\"[A-Za-z0-9_-]+\"\\s*:\\s*\"[^\"&]+\"))\\s*(?:.*?(?:api[_-]?key|aws_|secret|token|auth|password|version|server|x-powered-by|x-api-key|x-auth-token|debug|trace|credential)[^\\r\\n]*)",
  "blacklist": [
    "example\\.com",
    "test\\.com",
    "<x-example-header",
    "x-powered-by\":\\s*\"example\"",
    "server\":\\s*\"nginx\"",
    "docs\\.api\\.com"
  ],
  "description": "Detects sensitive HTTP headers, custom headers (including <prefix headers if applicable), and header-like key-value pairs in HTTP responses, JSON, or logs. Targets headers revealing API keys, tokens, server details, or debug info. Filters common false positives like example headers.",
  "severity": "high",
  "authors": ["Grok3"],
  "recommendations": [
    "Avoid exposing sensitive headers (e.g., X-API-Key, Authorization) in public responses.",
    "Suppress server and framework details (e.g., Server, X-Powered-By) in HTTP headers.",
    "Implement custom error handlers to prevent debug or trace headers from leaking.",
    "Audit client-side code (e.g., JavaScript) for hardcoded header values.",
    "Use a WAF to filter sensitive headers before they reach clients."
  ],
  "reference": [
    "https://owasp.org/Top10/A05_2021-Security_Misconfiguration/",
    "https://cheatsheetseries.owasp.org/cheatsheets/Information_Disclosure_Cheat_Sheet.html",
    "https://book.hacktricks.xyz/pentesting-web/information-disclosure"
  ],
  "grep": true
}
